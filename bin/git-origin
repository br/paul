#!/bin/bash

#/ NAME
#/     git origin -- switch origin remote to another remote
#/
#/ SYNOPSIS
#/     git owner remote

# figure out the project root under which bin, lib live
shome="$(cd -P -- "$(dirname -- "$0")/.." && pwd -P)"

# load a meat library
source "$shome/libexec/_jason"
require paul

DEFINE_boolean "init" "$FLAGS_FALSE" "Initial origin if it doesn't exist" 'i'

# entry point
function main {
  local nm_remote="$1"; shift

  local ghome="$(cd -P -- "./$(git rev-parse --show-cdup)" && pwd -P)"
  cd $ghome

  if [[ "$FLAGS_init" = "$FLAGS_TRUE" ]]; then
    if ! git remote show origin 2>&- > /dev/null; then
      git remote add origin "$(ryaml $ghome/.gitsetup.yml remotes $nm_remote)"
    fi
  else
    git remote rm origin 2>&1 > /dev/null || true
    git remote add origin "$(ryaml $ghome/.gitsetup.yml remotes $nm_remote)"
  fi

  if [[ "$#" = 1 ]]; then
    local nm_branch="$1"; shift
    git branch -d "$nm_branch" || { logger_info "ignore previous error"; true; }
    git checkout -b "$nm_branch" || { logger_info "ignore previous error"; true; }
  fi

  git push -u origin "$(git status -sb | awk '$1 == "##" { print $2 }' | perl -pe 's{\.\.\..*}{}')"
}

# parse the command-line
parse_command_line "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

main "$@"
